name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TAG_LATEST: ${{ secrets.REGISTRY_IMAGE }}:latest
  TAG_COMMIT: ${{ secrets.REGISTRY_IMAGE }}:${{ github.sha }}

jobs:
  publish:
    name: Build and Publish Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login -u "${{ secrets.REGISTRY_USERNAME }}" --password-stdin

      - name: Build and push Docker image
        run: |
          docker build -t ${{ env.TAG_COMMIT }} -t ${{ env.TAG_LATEST }} .
          docker push ${{ env.TAG_COMMIT }}
          docker push ${{ env.TAG_LATEST }}

  deploy:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    needs: publish
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout the repository
        uses: actions/checkout@v3
      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: add environment file
        run: |
          echo "TAG_COMMIT=${{ env.TAG_COMMIT }}" >> .env
          echo "NODE_ENV=production" >> .env
#          scp -o StrictHostKeyChecking=no .env ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }}:~/
      # Use appleboy/scp-action to securely copy both .env and docker-compose-prod.yml
      - name: Copy files via SCP
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          # Copy both .env and docker-compose-prod.yml to the server
          source: "./.env,./docker-compose-prod.yml"
          target: "~/.deploy/${{ github.event.repository.name }}/"
      - name: Deploy via SSH
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} << 'EOF'
            docker login -u ${{ secrets.REGISTRY_USERNAME }} -p ${{ secrets.REGISTRY_PASSWORD }} ${{ secrets.REGISTRY }}
            cd ~/.deploy/${{ github.event.repository.name }}
            docker compose -p finadmin -f docker-compose-prod.yml down --remove-orphans
            docker compose -p finadmin -f docker-compose-prod.yml pull
            docker compose -p finadmin -f docker-compose-prod.yml up -d
          EOF
